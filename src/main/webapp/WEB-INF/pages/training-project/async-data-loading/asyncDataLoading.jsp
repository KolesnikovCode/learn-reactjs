<%@ page contentType="text/html;charset=UTF-8" language="java" %>

<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@taglib prefix="lt" tagdir="/WEB-INF/tags/layout" %>
<%@taglib prefix="wg" tagdir="/WEB-INF/tags/widget" %>
<%@taglib prefix="ce" tagdir="/WEB-INF/tags/application/core/context" %>
<%@taglib prefix="app" tagdir="/WEB-INF/tags/application" %>
<%@taglib prefix="ad" tagdir="/WEB-INF/tags/application/advertising" %>

<c:url var="Url" value=""/>

<a name="pageStart"></a>
<lt:layout cssClass="black-line"/>
<lt:layout cssClass="page async-data-loading-page">
    <h1>5.7 Асинхронная загрузка данных</h1>

    <br/>

    <p class="introduction">
        Большинство веб-приложений работают с данными, которые, как правило, хранятся
        в базе данных (БД). Что получить эти данные приложения обычно используют AJAX,
        то есть асинхронные запросы к серверу. Сервер, получив такой запрос, обращается
        к БД, а затем возвращает данные обратно приложению. Здесь мы подробнее рассмотрим
        суть асинхронной загрузки данных и её возможную реализацию.
    </p>

    <br/>

    <br/>
    <br/>
    <div class="gray-line"></div>
    <h2>5.7.1 Мотивация</h2>
    <br/>

    <p>
        Теперь мы подошли к важной части: взаимодействие сервера и клиента. Наш клиент
        написан на React, сервер же может быть написан на чём угодно: <b>Java</b>, <b>C#</b>, <b>PHP</b>,
        <b>Kothlin</b>, <b>JavaScript</b> и т.д. Это здорово, когда над проектом трудятся одновременно
        две команды: <b>frontend</b> и <b>backend</b>. Но очень частой является ситуация, когда <b>backend</b>
        разрабатывается медленнее или его в данный момент вообще нет. Такое происходит
        по ряду причин: мало разработчиков, сложная бизнес-логика, нет средств на
        разработку и пр. Но клиент делать нужно, мало того он должен работать с какими-то
        данными, чтобы можно было демонстрировать результаты труда.
    </p>

    <p>
        Ранее мы уже говорили о фиктивных данных и даже создали их. Далее мы
        усовершенствуем уже имеющийся код. Главная задача данного раздела:
        <b>эмулировать сервер</b>, который будет возвращать данные. Данные же будут
        фейковые, но пользователю будет казаться, что приложение работает с
        настоящим сервером: будет показываться лоудер загрузки, будут приходить
        данные и т.д. То есть будет работать весь функционал, будто всё
        по-настоящему. Также мы добавим возможность переключения приложения с
        фейковых данных на реальные только с помощью файла <code>config.js</code>.
    </p>

    <p>
        Что ж, не будем терять времени и приступим к созданию фиктивного сервера!
    </p>

    <br/>
    <br/>
    <div class="gray-line"></div>
    <h2>5.7.2 Взаимодействие клиент-сервер</h2>
    <br/>

    <p>
        Давайте повторим базовые стадии взаимодействия клиент-сервер. На основании
        этого мы будем проектировать наш фейковый сервер.
    </p>

    <c:url var="Url" value="https://ru.wikipedia.org/wiki/%D0%9A%D0%BB%D0%B8%D0%B5%D0%BD%D1%82_%E2%80%94_%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80"/>
    <c:url var="Url" value="https://ru.wikipedia.org/wiki/HTTP"/>

    <p>
        Итак, у нас есть клиент. Обычно это программа, которая запрашивает данные
        по определённом протоколу у сервера. Как правило, мы используем протокол <b>HTTPS</b> - это <b>HTTP</b> с
        шифрованием. Сначала клиент создаёт запрос определённого типа: <b>GET</b>, <b>POST</b>, <b>PUT</b>, <b>DELETE</b> и т.д.
        Также он может добавить в запрос какие-то данные, например данные формы,
        если запрос типа <b>POST</b> или <b>PUT</b>. Кроме этого клиент может указать заголовки и
        параметры запроса. Когда запрос создан, клиент посылает его серверу. Про архитектуру
        клиент-сервер и протокол <b>HTTP</b> можно почитать в википедии. Обязательно это
        сделайте, если эти вещи для вас мало понятны или, что ещё хуже, вы слышите о них впервые!
    </p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>
    <p></p>

</lt:layout>

<c:url var="prevPageUrl" value="/training-project/routing"/>
<c:url var="nextPageUrl" value="/training-project/app-state"/>

<app:page-navigate
        prevPageUrl="${prevPageUrl}"
        pageStartAncor="pageStart"
        nextPageUrl="${nextPageUrl}"
/>